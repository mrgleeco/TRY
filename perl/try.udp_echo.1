

use strict;
use IO::Socket;


use strict;
use IO::Socket;
my($sock, $oldmsg, $newmsg, $hisaddr, $hishost, $MAXLEN, $PORTNO);
$MAXLEN = 1024;
# $PORTNO = 5151;
$PORTNO = "/var/run/metrics.sock";
unlink $PORTNO;
$sock = IO::Socket::INET->new(Local=> $PORTNO, Proto => 'udp', Type => SOCK_DGRAM )
    or die "socket: $@";
print "Awaiting UDP messages on port $PORTNO\n";
$oldmsg = "This is the starting message.";
while ($sock->recv($newmsg, $MAXLEN)) {
    my($port, $ipaddr) = sockaddr_in($sock->peername);
    $hishost = gethostbyaddr($ipaddr, AF_INET);
    print "Client $hishost said ``$newmsg''\n";
    $sock->send($oldmsg);
    $oldmsg = "[$hishost] $newmsg";
} 
die "recv: $!";


__END__
my $MAX_TO_READ = 1024;

my $loc = "/var/run/metrics.sock";
unlink $loc;
my $server = IO::Socket::INET->new(LocalPort => $loc,
                                Proto     => "udp")
    or die "Couldn't be a udp server on port $loc : $@\n";

# Then, go into a loop receiving messages:

my $datagram;
while (my $him = $server->recv($datagram, $MAX_TO_READ, undef)) {
    warn "got message: $him \n";
} 

__END__


$portaddr = recv(SOCKET, $MSG, $MAXLEN, 0)      or die "recv: $!";
($portno, $ipaddr) = sockaddr_in($portaddr);
$host = gethostbyaddr($ipaddr, AF_INET);
print "$host($portno) said $MSG\n";




use strict;
use Socket;
use IO::Socket::INET;
use AnyEvent::Socket;
use AnyEvent::Handle;

my $cv = AnyEvent->condvar;

my $hdl;

my $loc = "/var/run/metrics.sock";
# my $loc = "/tmp/metrics.sock";
unlink $loc;
warn "creating loc $loc\n";

AnyEvent::Socket::tcp_server 'unix/', $loc, sub {
    my ($fh) = @_;
   $hdl =
      AnyEvent::Handle->new (
         fh => $fh,
         on_eof => sub { warn "on_eof fired\n" },
         on_error => sub { warn "on_error: $!\n" },
      );

   # $hdl->push_write ("Hello!\015\012");

   $hdl->on_read (sub {
      my ($hdl) = @_;

      $hdl->push_read (line => sub {
         my ($hdl, $line) = @_;
        print "SERVER> $line\n";
        });
    });
};

$cv->wait;
